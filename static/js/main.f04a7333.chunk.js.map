{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","regex/validation.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","isValid","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","pattern","NewMovie","props","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isImgUrlValid","setIsImgUrlValid","isImdbUrlValid","setIsImdbUrlValid","isDisabled","trim","onSubmit","e","preventDefault","current","onAdd","test","disabled","App","moviesFromServer","setMovies","addMovie","useCallback","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f04a7333.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  isValid?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  isValid = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {isValid && touched && (\n        <p className=\"help is-danger\">URL is not valid</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nexport const pattern = (\n  /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/\n);\n","import { useState } from 'react';\n\nimport { TextField } from '../TextField';\n\nimport { Movie } from '../../types/Movie';\nimport { pattern } from '../../regex/validation';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = (props) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isImgUrlValid, setIsImgUrlValid] = useState(false);\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(false);\n\n  const isDisabled = !(\n    title.trim() && imdbId.trim() && imdbUrl.trim()\n    && imgUrl.trim() && !isImdbUrlValid && !isImgUrlValid\n  );\n\n  function resetForm() {\n    setTitle('');\n    setDescription('');\n    setImdbId('');\n    setImdbUrl('');\n    setImgUrl('');\n  }\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n\n    setCount(current => current + 1);\n\n    props.onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbId,\n      imdbUrl,\n    });\n\n    resetForm();\n  }\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => {\n          setImgUrl(value);\n          setIsImgUrlValid(!pattern.test(value));\n        }}\n        isValid={isImgUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => {\n          setImdbUrl(value);\n          setIsImdbUrlValid(!pattern.test(value));\n        }}\n        isValid={isImdbUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport { Movie } from './types/Movie';\n\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = useCallback((movie: Movie) => {\n    setMovies(state => ([\n      ...state,\n      movie,\n    ]));\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}